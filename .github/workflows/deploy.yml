name: pick-team github CI-CD

on:
  push:
    branches:
      - main  # main 브랜치에 push 이벤트가 발생했을 때 워크플로우 실행
      - production # production 브랜치에 push 이벤트가 발생했을 때 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 작업 실행

    env:
      GITHUB_REF_NAME: ${{ github.ref_name }} #이벤트가 일어난 브랜치 이름 읽어오기

    steps:
      - name: Checkout source
        uses: actions/checkout@v3  # GitHub 저장소의 소스코드를 가져오는 액션

      - name: Set up JDK 17
        uses: actions/setup-java@v3  # JDK 설정 액션
        with:
          java-version: '17'  # Java 17 버전 사용
          distribution: 'temurin'  # AdoptOpenJDK의 Temurin 배포판 사용

      - name: 브랜치 환경 로그 확인
        run: |
          echo "현재 브랜치"
          echo "${GITHUB_REF_NAME}"

      - name: Spring 환경변수 주입 (.env 대체) # .env 파일의 내용을 secret으로부터 읽어다 통째로 주입 (dev)
        run: |
          if [ "${GITHUB_REF_NAME}" == "main" ]; then
            echo "${{ secrets.ENV_DEV }}" > .env # main 브랜치일 경우 DEV 환경변수 적용
            echo "EC2_HOST=${{ secrets.EC2_HOST_DEV }}" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" == "production" ]; then
            echo "${{ secrets.ENV_PROD }}" > .env #production 브랜치일 경우 PROD 환경변수 적용
            echo "EC2_HOST=${{ secrets.EC2_HOST_PROD }}" >> $GITHUB_ENV
          else
            echo "지원되지 않는 브랜치입니다. 종료합니다." #예외처리
            exit 1
          fi

      - name: 자동 이미지 태그 설정 (브랜치명 + 날짜 + SHA)
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TODAY=$(date +%Y%m%d)
          IMAGE_TAG="${GITHUB_REF_NAME}-$TODAY-$SHORT_SHA"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: mvnw 실행 권한 부여
        run: chmod +x ./mvnw  # mvnw 파일(Wrapper)에 실행 권한 부여

      - name: Maven 빌드 실행
        run: ./mvnw clean package -DskipTests  # Maven 빌드 실행 (테스트 생략)
      # run: ./mvnw clean verify  # 테스트 포함 빌드 시 이 명령어 사용

      - name: Docker Hub 로그인
        uses: docker/login-action@v3  # Docker Hub에 로그인하는 액션
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/kosta-pick-team:${{ env.IMAGE_TAG }} .  # 애플리케이션을 도커 이미지로 빌드

      - name: Docker 이미지 푸시
        run: docker push ${{ secrets.DOCKER_USERNAME }}/kosta-pick-team:${{ env.IMAGE_TAG }}   # 빌드한 이미지를 Docker Hub에 업로드


      - name: EC2에 docker-compose.yml + .env 전송 #EC2로 전송
        uses: appleboy/scp-action@v0.1.7  # EC2로 파일 전송하는 액션(SCP 방식)
        with:
          host: ${{ env.EC2_HOST }}  # EC2 호스트 주소
          username: ${{ secrets.EC2_USERNAME }}  # EC2 사용자명
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 개인 키 (.pem 내용)
          source: "docker-compose.yml,.env"  # 전송할 파일 목록 (쉼표로 구분)
          target: "~/cicd-docker"  # EC2 내 대상 경로

      - name: EC2에서 docker-compose 실행
        uses: appleboy/ssh-action@v1.0.0  # EC2에 SSH 접속하여 명령 실행
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/cicd-docker  # 도커 파일이 위치한 경로로 이동
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/kosta-pick-team:${{ env.IMAGE_TAG }}  # 최신 이미지 가져오기
            sudo docker-compose down  # 기존 컨테이너 종료
            sudo docker-compose up -d  # 백그라운드로 새 컨테이너 실행
